### Kafka Installation
[Apache Kafka](https://kafka.apache.org/) is an open-source stream-processing software platform.

**Install ZooKeeper**

Kafka uses ZooKeeper, so you need to first install ZooKeeper server:
```shell
sudo apt-get install zookeeper
```
{: .copy-code}

**Install Kafka**

The second thing to install is Kafka:
```shell
wget https://dlcdn.apache.org/kafka/3.0.0/kafka_2.13-3.0.0.tgz

tar xzf kafka_2.13-3.0.0.tgz

mv kafka_2.13-3.0.0 /usr/local/kafka
```
{: .copy-code}


**Setup ZooKeeper Systemd Unit file**

Create systemd unit file for Zookeeper:
```shell
sudo nano /etc/systemd/system/zookeeper.service
```
{: .copy-code}

Add below follow content:
```shell
[Unit]
Description=Apache Zookeeper server
Documentation=http://zookeeper.apache.org
Requires=network.target remote-fs.target
After=network.target remote-fs.target

[Service]
Type=simple
ExecStart=/usr/local/kafka/bin/zookeeper-server-start.sh /usr/local/kafka/config/zookeeper.properties
ExecStop=/usr/local/kafka/bin/zookeeper-server-stop.sh
Restart=on-abnormal

[Install]
WantedBy=multi-user.target
```
{: .copy-code}

**Setup Kafka Systemd Unit file**

Create systemd unit file for Kafka:
```shell
sudo nano /etc/systemd/system/kafka.service
```
{: .copy-code}

Add the below content. Make sure to replace "`PUT_YOUR_JAVA_PATH`" with your real JAVA_HOME path as per the Java installed on your system, by default like “/usr/lib/jvm/java-11-openjdk-xxx”:
```shell
[Unit]
Description=Apache Kafka Server
Documentation=http://kafka.apache.org/documentation.html
Requires=zookeeper.service

[Service]
Type=simple
Environment="JAVA_HOME=PUT_YOUR_JAVA_PATH"
ExecStart=/usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties
ExecStop=/usr/local/kafka/bin/kafka-server-stop.sh

[Install]
WantedBy=multi-user.target
```
{: .copy-code}

Start ZooKeeper and Kafka:
```shell
sudo systemctl start zookeeper

sudo systemctl start kafka
```
{: .copy-code}

**Create Uplink Converter**

To create **Uplink converter**, go to the **Data Converters** section and click **Add Data Converter**, then **Create New Converter**. Name it "**Uplink (Kafka)**" and select the **uplink** type. Use debug mode when you need to parse decoder events.

{% capture kafka_please_note %}
**Note:** While debug mode is very useful for development and troubleshooting, leaving it enabled in production mode can significantly increase the disk space used by the database since all debug data is stored there. After debugging is complete, it is highly recommended turning off debug mode.
{% endcapture %}
{% include templates/info-banner.md content=kafka_please_note %}

You can use the following code, copy it to the decoder function section:

```js
// Decode an uplink message from a buffer
// payload - array of bytes
// metadata - key/value object

/** Decoder **/
// decode payload to JSON
var payloadJsn = decodeToJson(payload);

// decode payload to String
// var payloadStr = decodeToString(payload);
// var groupName = 'thermostat devices';
// use assetName and assetType instead of deviceName and deviceType
// to automatically create assets instead of devices.
// var assetName = 'Asset A';
// var assetType = 'building';

// Result object with device/asset attributes/telemetry data
   var result = {
// Use deviceName and deviceType or assetName and assetType, but not both.
   deviceName: payloadJsn.deviceName,
   deviceType: payloadJsn.deviceType,
// assetName: assetName,
// assetType: assetType,
   attributes: payloadJsn.attributes,
   telemetry: payloadJsn.telemetry
};

/** Helper functions **/
function decodeToString(payload) {
   return String.fromCharCode.apply(String, payload);
}
function decodeToJson(payload) {
   // covert payload to string.
   var str = decodeToString(payload);
   // parse string to JSON
   var data = JSON.parse(str);
   return data;
}
return result;
```
{: .copy-code}

Example of payload:
```json
{
        "deviceName":"SN-111",
        "deviceType":"default",
        "attributes":{
            "model":"Model A"
        },
        "telemetry":[
            {
                "ts":1634601341000,
                "values":{
                    "battery":3.99,
                    "temperature":27.05
                }
            },
            {
                "ts":1634608351000,
                "values":{
                    "battery":3.14,
                    "temperature":27.51
        }}]
}
```
{: .copy-code}

{% include images-gallery.html imageCollection="Create Uplink Converter" %}

You can change the parameters and decoder code when creating a converter or editing. If the converter has already been created, click the pencil icon to edit it. Copy the sample converter configuration (or use your own configuration) and paste it into the decoder function. Then save the changes by clicking the checkmark icon.


**Create Integration**

After creating the Uplink converter, it is possible to create an integration. Required fields: Name, Type, Topics

{% include images-gallery.html imageCollection="Kafka Integration" %}

With these settings, the integration will request updates from the Kafka broker every 5 seconds. And if set a topic does not exist at the broker, it will be created automatically.

**Send test Uplink message**

You can simulate a message from a device or server using a terminal. To send an uplink message, you need a Kafka endpoint URL from the integration.
```shell
echo "{\"deviceName\":\"SN-111\",\"deviceType\":\"default\",\"attributes\":{\"model\":\"Model A\"},\"telemetry\":[{\"ts\":1527863143000,\"values\":{\"battery\":9.99,\"temperature\":27.99}},{\"ts\":1527863044000,\"values\":{\"battery\":9.99,\"temperature\":99.99}}]}" | /usr/local/kafka/bin/kafka-console-producer.sh --broker-list YOUR_KAFKA_ENDPOINT_URL:9092 --topic my-topic > /dev/null
```
{: .copy-code}

Result:

{% include images-gallery.html imageCollection="Kafka_integration_test_send_msg_result" %}

Also, you can check through the terminal what data came to Kafka.
```yml
/usr/local/kafka/bin/kafka-console-consumer.sh --bootstrap-server YOUR_KAFKA_ENDPOINT_URL:9092 --topic my-topic --from-beginning
```
{: .copy-code}